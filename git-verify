#!/bin/bash


### Usage:
###  git verify [-b [-|verify-branch]] [--all] [branchA, branchB, ...]
###
### You can use this to automate mass-branch-merging of
### multiple independant/separate branches to one superior,
### for example to verify multiple changes together.
### This can rebuild 'verify' branch from those which were
### merged there last time.
###
### After merging those, it automatically pushes them to your
### own git remote (personal mirror).
###
### Have your git repo cloned somewhere.
### Have remote named 'my' there.
### Have your branch with personal changes there
### (default is empty which means no 'always merge' branches).
###
### go to your repo-working-copy-dir
### execute:
###
###  git verify
###  # lists what other branches are contained in the 'verify' branch
###
###  git verify --all
###  # recreate 'verify' branch:
###  # - destroy 'verify' branch
###  # - checkout branch 'master' as 'verify'
###  # - merge you personal branch there
###  # - in order, merge all previously merged branches
###
###  git verify patch1 patch-extra
###  # recreate 'verify'
###  # merge branches: personal, 'patch1', 'patch-extra'
###
###  git verify --all additional-extra
###  # recreate, merge those already contained + 'additional-extra' branch
###
### This refuses to continue if there are any modifications (index or w.copy).
###
### To change how the 'your-personal-always-merged-branch(es)' are called,
### export GIT_VERIFY_ALWAYS_MERGE="custom1 custom2...".
### Be aware that those will always be rebased on top of master
### before merging, and merged first before the rest of branches
### specified on cli (or via --all).
###
### You can specify different name for the 'verify' branch,
### using -b <name>, it has to be provided before the name of
### branches for merging (including --all).
###
###  git verify -b test-this --all branch1 branch2
###
### Specify '-' to use currently active branch instead of 'verify'
###  git verify -b - --all branch1



set -o errexit

BASE_BR="master"
VERIFY_BR="${GIT_VERIFY_VERIFY_BRANCH:-verify}"
ALWAYS_MERGE="${GIT_VERIFY_ALWAYS_MERGE}"

list_merged() {
    git log $VERIFY_BR --merges \
        | sed -n "s/.*branch '\(.*\)' into ${VERIFY_BR}.*/\1/p" | tac;
}

test_branch() {
    if git branch | grep -q "$1" && git log -1 "$1" -- &>/dev/null; then
        return
    fi
    echo "ERROR: Branch $1 not found!"
    exit 128
}

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    sed -n 's/^###/ /p' $0
    exit
fi

if [[ "$1" == "-b" ]]; then
    shift
    VERIFY_BR="$1"
    if [[ "x${VERIFY_BR}" == "x-" ]]; then
        # use currently active branch instead of the 'verify'
        VERIFY_BR="$(git branch --no-color 2>/dev/null | sed -n "s/^\* \(.*\)\$/\1/p")"
    fi
    shift
    echo "==/ $VERIFY_BR /=="
fi

if [[ -z "$1" ]]; then
    echo "==[ No branches specified ... listing last merges ]=="
    echo ""
    BRANCHES=$(list_merged)
    echo " " $BRANCHES
    echo ""
    echo "---- all branches ----"
    git branch
else
    BRANCHES=""
    if [[ "$1" == "--all" ]]; then
        shift
        BRANCHES="$(list_merged) "
    fi
    BRANCHES="${BRANCHES}$@"

    echo "==[ Going to merge branches: ]=="

    for BR in $ALWAYS_MERGE; do
        echo "* $BR"
        test_branch "$BR"
        git checkout "$BR"
        git rebase $BASE_BR
        if [[ $? != 0 ]]; then
            echo "Personal branch $BR conflicts with $BASE_BR!"
            git rebase --abort
            exit 1
        fi
    done
    echo $BRANCHES
    for BR in $BRANCHES; do
        test_branch "$BR"
    done
    echo ""

    if [[ ! -z "$(git status --porcelain)" ]]; then
        echo "==[ Unclean working copy ]=="
        echo "Please first commit/stash/remove your local modifications.";
        echo ""
        git status
        exit 1
    fi

    git checkout $BASE_BR
    git branch -D $VERIFY_BR || :
    git checkout -b $VERIFY_BR

    set -e

    for BR in $ALWAYS_MERGE; do
        echo "==== $BR"
        git merge --ff-only $BR
    done

    for BR in $BRANCHES; do
        echo "==== $BR"
        git merge --no-ff --commit --no-edit $BR
    done


    echo "==[ Pushing changes ]=="
    git push my $ALWAYS_MERGE:$ALWAYS_MERGE -f
    git push my ${VERIFY_BR}:${VERIFY_BR} -f

    echo "==[ DONE ]=="
fi
