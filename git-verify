#!/bin/bash


### Usage:
###
### You can use this to automate mass-branch-merging of
### multiple independant/separate branches to one superior,
### for example to verify multiple changes together.
### This can rebuild 'verify' branch from those which were
### merged there last time.
###
### After merging those, it automatically pushes them to your
### own git remote (personal mirror).
###
### Have your git repo cloned somewhere.
### Have remote named 'my' there.
### Have your branch with personal changes there (default=psedlak).
###
### go to your repo-working-copy-dir
### execute:
###
###  git verify
###  # lists what other branches are contained in the 'verify' branch
###
###  git verify --all
###  # recreate 'verify' branch:
###  # - destroy 'verify' branch
###  # - checkout branch 'master' as 'verify'
###  # - merge you personal branch there
###  # - in order, merge all previously merged branches
###
###  git verify patch1 patch-extra
###  # recreate 'verify'
###  # merge branches: personal, 'patch1', 'patch-extra'
###
###  git verify --all additional-extra
###  # recreate, merge those already contained + 'additional-extra' branch
###
### This refuses to continue if there are any modifications (index or w.copy).
###
### To change how the 'your-personal-always-merged-branch' is called,
### export GIT_VERIFY_ALWAYS_MERGE.
###



set -o errexit

ALWAYS_MERGE="${GIT_VERIFY_ALWAYS_MERGE:-psedlak}"

list_merged() {
    git log verify --merges \
        | sed -n "s/.*branch '\(.*\)' into verify.*/\1/p" | tac;
}

test_branch() {
    if git branch | grep -q "$1" && git log -1 "$1" &>/dev/null; then
        return
    fi
    echo "ERROR: Branch $1 not found!"
    exit 128
}

if [[ -z "$1" || "$1" == "--help" ]]; then
    echo "==[ No branches specified ... listing last merges ]=="
    echo ""
    BRANCHES=$(list_merged)
    echo " " $BRANCHES
    echo ""
    echo "---- all branches ----"
    git branch
else
    BRANCHES=""
    if [[ "$1" == "--all" ]]; then
        shift
        BRANCHES="$(list_merged) "
    fi
    BRANCHES="${BRANCHES}$@"

    echo "==[ Going to merge branches: ]=="

    for BR in $ALWAYS_MERGE; do
        echo "* $BR"
        test_branch "$BR"
    done
    echo $BRANCHES
    for BR in $BRANCHES; do
        test_branch "$BR"
    done
    echo ""

    if [[ ! -z "$(git status --porcelain)" ]]; then
        echo "==[ Unclean working copy ]=="
        echo "Please first commit/stash/remove your local modifications.";
        echo ""
        git status
        exit 1
    fi

    git checkout master
    git branch -D verify
    git checkout -b verify

    set -e

    for BR in $ALWAYS_MERGE; do
        echo "==== $BR"
        git merge --ff-only $BR
    done

    for BR in $BRANCHES; do
        echo "==== $BR"
        git merge --no-ff --commit --no-edit $BR
    done


    echo "==[ Pushing changes ]=="
    git push my $ALWAYS_MERGE:$ALWAYS_MERGE -f
    git push my verify:verify -f

    echo "==[ DONE ]=="
fi
