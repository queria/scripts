#!/usr/bin/python
# vim: set sw=4 ts=4 et fileencoding=utf-8:

# you need to have pyosd and unidecode (pip) installed
from __future__ import print_function
import datetime
import os
import pyosd
import subprocess as proc
import sys
import time
from unidecode import unidecode


class SysMon:
    def __init__(self):
        self.nowplay_cmd = self.find_nowplay()
        self.has_mpstat = self.find_mpstat()
        self.last_battery = 0

        pass

    def keys(self):
        return ('datetime',  # 'updates',
                'nowplaying', 'cpu_usage', 'cpu_temp',
                'mem_free', 'mem_swapped',
                'disk_free',
                'battery', 'extra')

    def __getitem__(self, attr):
        return getattr(self, attr)()

    def datetime(self):
        return datetime.datetime.now().strftime('%a %d/%H:%M:%S')

    def find_nowplay(self):
        return proc.check_output(('/usr/bin/which', 'nowplaying'))

    def nowplaying(self):
        if not self.nowplay_cmd:
            return ''
        playing = proc.check_output(self.nowplay_cmd, shell=True)
        playing = playing.strip()
        playing = playing.decode('utf-8')
        return playing

    def find_mpstat(self):
        return proc.check_output(('/usr/bin/which', 'mpstat'))

    def cpu_usage(self):
        if self.has_mpstat:
            idle = proc.check_output(
                ("mpstat -u 1 1|grep Average"
                 "|sed 's/.*\W\([0-9]*\)\.\([0-9]\+\)$/\\1/'"),
                shell=True)
        else:
            idle = proc.check_output(
                ("top -n 1|grep Cpu|awk '{ print $5 }'"
                 "|sed \"s/\(.*\)\..*/\\1/\""),
                shell=True)
        return 100 - int(idle.strip())

    def cpu_temp(self):
        temp = proc.check_output(
            ('sensors|grep "${CPU_SENSOR:-Core}"'
             '|head -n1|sed "s/.* +\([0-9\.]\+\).\{2\} .*/\\1/"'),
            shell=True)
        return int(float(temp.strip()))

    def mem_free(self):
        free = proc.check_output(
            ("free -m|grep Mem"
             "|awk '{print $4 + $7}'"),
            shell=True)
        return int(free.strip())

    def mem_swapped(self):
        swap = proc.check_output(
            ("free -m|grep Swap|awk '{print $3}'"),
            shell=True)
        return (swap.strip())

    def disk_free(self):
        root = proc.check_output(
            ("df -h /|tail -n1|awk '{ print $4 }'"),
            shell=True).strip()
        home = proc.check_output(
            ("df -h /home|tail -n1|awk '{ print $4 }'"),
            shell=True).strip()
        if root == home:
            return '/%s' % root
        else:
            return '/%s ~%s' % (root, home)

    def battery(self):
        batteries = proc.check_output(
            ('battery |sed "s/.* \([0-9\.]\+\)\%.*/\\1/"'),
            shell=True)

        if not batteries.strip():
            return ''

        battery = sum([float(bat_num.strip())
                       for bat_num
                       in batteries.split('\n')
                       if bat_num.strip()])
        if not self.last_battery or battery == self.last_battery:
            mark = ''
        elif self.last_battery > battery:
            mark = '--'
        else:
            mark = '++'
        self.last_battery = battery
        return ' | %s%%%s' % (battery, mark)

    def extra(self):
        extra = []
        try:
            with open(os.path.expanduser('~/osd-notes')) as notes:
                extra.extend(notes.read().strip().split('\n'))
        except IOError:
            pass
        if extra:
            return ' | '.join(extra).decode('utf-8')
        return u''


class XOSD_Printer:
    def __init__(self, status_line, data_provider, refresh_time=2,
                 debug=False):
        self.osd = pyosd.osd('fixed', 'yellow')
        self.osd.set_timeout(refresh_time)
        self.osd.set_align(pyosd.ALIGN_CENTER)
        self.osd.set_outline_colour('black')
        self.osd.set_outline_offset(1)

        self.debug = debug
        self.line = status_line
        self.source = data_provider
        self.time = refresh_time

        try:
            self.run()
        except KeyboardInterrupt:
            print('-EXIT-')

    def run(self):
        while True:
            time_used = self.print_state()
            # print('used: %s' % time_used)
            sleep_sec = max(0.1, self.time - time_used - 0.01)
            time.sleep(sleep_sec)

    def print_state(self):
        start = datetime.datetime.now()
        line = self.line.format(**dict(self.source))

        if self.debug:
            print(u'%s\r' % unidecode(line), end='')
            sys.stdout.flush()
        else:
            self.osd.display(unidecode(line))
            self.osd.display(unidecode(self.source.extra()), line=1)
        return (datetime.datetime.now() - start).total_seconds()


def main(debug=False):
    status_line = unicode(
        '{nowplaying} |'
        ' {datetime} |'
        # ' {updates} |'
        ' {cpu_usage}% {cpu_temp}*C |'
        ' {mem_free} free {mem_swapped} swap |'
        ' {disk_free}'
        '{battery}'
    )
    mon = SysMon()
    XOSD_Printer(status_line,
                 mon,
                 refresh_time=4,
                 debug=debug)

if __name__ == '__main__':
    main(debug=('--debug' in sys.argv))
